import { Lucia } from 'lucia';
import { DrizzlePostgreSQLAdapter, DrizzleSQLiteAdapter } from '@lucia-auth/adapter-drizzle';
import { GitHub } from 'arctic';

import { getDb, getSchema, getDbStatus } from '../db'; // Assuming db/index.ts exports these
import type { NodePgDatabase } from 'drizzle-orm/node-postgres';
import type { BetterSQLite3Database } from 'drizzle-orm/better-sqlite3';

// These types would ideally be more specific, generated by Drizzle or manually defined
// to match your authUserTable, authSessionTable structures.
// For now, using 'any' as a placeholder based on db/index.ts AnySchema.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AuthUserTable = any; 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AuthSessionTable = any;

// Cached instances for lazy initialization
let luciaInstance: Lucia | null = null;
let githubAuthInstance: GitHub | null = null;

// Lazy initialization function for Lucia
function initializeLucia(): Lucia {
  const { dialect } = getDbStatus();
  if (!dialect) {
    throw new Error('Database dialect not determined. Ensure database is initialized before using Lucia.');
  }

  const db = getDb();
  const schema = getSchema();

  const authUserTable = schema.authUser as AuthUserTable;
  const authSessionTable = schema.authSession as AuthSessionTable;

  if (!authUserTable || !authSessionTable) {
    throw new Error('Authentication tables (authUser, authSession) not found in the schema. Ensure they are defined and the schema is generated.');
  }

  let adapter;
  if (dialect === 'postgres') {
    adapter = new DrizzlePostgreSQLAdapter(
      db as NodePgDatabase, // Cast based on dialect
      authSessionTable,
      authUserTable
    );
  } else if (dialect === 'sqlite') {
    adapter = new DrizzleSQLiteAdapter(
      db as BetterSQLite3Database, // Cast based on dialect
      authSessionTable,
      authUserTable
    );
  } else {
    throw new Error(`Unsupported database dialect for Lucia adapter: ${dialect}`);
  }

  return new Lucia(adapter, {
    sessionCookie: {
      name: 'session', // Important to use a generic name for production
      expires: false, // session cookies have very long lifespan (2 years)
      attributes: {
        // set to `true` when using HTTPS
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax',
        // domain: 'yourdomain.com' // set if using a custom domain
      },
    },
    getUserAttributes: (attributes: DatabaseUserAttributes) => {
      return {
        username: attributes.username,
        email: attributes.email,
        firstName: attributes.first_name, // Ensure this matches the casing in DatabaseUserAttributes
        lastName: attributes.last_name,   // Ensure this matches the casing in DatabaseUserAttributes
        authType: attributes.auth_type,
        githubId: attributes.github_id,
      };
    },
    getSessionAttributes: () => {
      // If DatabaseSessionAttributes is empty, attributes will be {}.
      // If you add properties to DatabaseSessionAttributes, type them here.
      return {
        // any custom session attributes if needed, ensure they are in DatabaseSessionAttributes
      };
    }
  });
}

// Lazy initialization function for GitHub OAuth
function initializeGithubAuth(): GitHub {
  return new GitHub(
    process.env.GITHUB_CLIENT_ID || 'YOUR_GITHUB_CLIENT_ID_HERE', // Replace with your actual Client ID or load from env
    process.env.GITHUB_CLIENT_SECRET || 'YOUR_GITHUB_CLIENT_SECRET_HERE', // Replace with your actual Client Secret or load from env
    process.env.GITHUB_REDIRECT_URI || 'http://localhost:3000/api/auth/github/callback'
  );
}

// Getter function for Lucia instance
export function getLucia(): Lucia {
  if (!luciaInstance) {
    luciaInstance = initializeLucia();
  }
  return luciaInstance;
}

// Function to reset Lucia instance (useful for testing or config changes)
export function resetLucia(): void {
  luciaInstance = null;
}

// Getter function for GitHub OAuth instance
export function getGithubAuth(): GitHub {
  if (!githubAuthInstance) {
    githubAuthInstance = initializeGithubAuth();
  }
  return githubAuthInstance;
}

// Legacy exports for backward compatibility (deprecated)
export const lucia = getLucia;
export const githubAuth = getGithubAuth;

// IMPORTANT: Define DatabaseUserAttributes and DatabaseSessionAttributes
// These interfaces are crucial for type safety with Lucia.
// You should define them based on the columns in your authUser and authSession tables.

// Corresponds to the columns in your `authUser` table that you want Lucia to handle.
interface DatabaseUserAttributes {
  username: string;
  email: string;
  first_name: string | null;
  last_name: string | null;
  auth_type: 'email_signup' | 'github';
  github_id: string | null;
}

// Corresponds to any custom columns in your `authSession` table.
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
interface DatabaseSessionAttributes {
  // exampleProperty?: string; // Add any custom session attributes here
}

declare module 'lucia' {
  interface Register {
    Lucia: typeof lucia;
    DatabaseUserAttributes: DatabaseUserAttributes;
    DatabaseSessionAttributes: DatabaseSessionAttributes;
  }
}

// Ensure you have GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET in your .env file
// For example:
// GITHUB_CLIENT_ID=your_client_id
// GITHUB_CLIENT_SECRET=your_client_secret
