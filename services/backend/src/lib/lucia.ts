import { Lucia } from 'lucia';
import { DrizzleSQLiteAdapter } from '@lucia-auth/adapter-drizzle';
import { GitHub } from 'arctic';

import { getDbStatus, getDb, getSchema } from '../db';
import type { BetterSQLite3Database } from 'drizzle-orm/better-sqlite3';

// These types would ideally be more specific, generated by Drizzle or manually defined
// to match your authUserTable, authSessionTable structures.
// For now, using 'any' as a placeholder based on db/index.ts AnySchema.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AuthUserTable = any; 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AuthSessionTable = any;

// Cached instances for lazy initialization
let luciaInstance: Lucia | null = null;
let githubAuthInstance: GitHub | null = null;

// Helper function to check if we're in test mode
function isTestMode(): boolean {
  return process.env.NODE_ENV === 'test';
}

// Helper function for conditional logging
function logInfo(message: string): void {
  if (!isTestMode()) {
    console.log(message);
  }
}

// Lazy initialization function for Lucia
function initializeLucia(): Lucia {
  const { dialect, configured, initialized } = getDbStatus();
  
  if (!configured || !initialized) {
    throw new Error('Database not configured or initialized. Ensure database is set up before using Lucia.');
  }

  if (dialect !== 'sqlite') {
    throw new Error('Only SQLite is supported for authentication.');
  }

  // Use existing database connection and schema
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const db = getDb() as BetterSQLite3Database<any>;
  const schema = getSchema();
  
  const authUserTable = schema.authUser as AuthUserTable;
  const authSessionTable = schema.authSession as AuthSessionTable;

  if (!authUserTable || !authSessionTable) {
    throw new Error('Authentication tables (authUser, authSession) not found in the schema.');
  }

  // Create Lucia adapter with existing database instance
  const adapter = new DrizzleSQLiteAdapter(
    db,
    authSessionTable,
    authUserTable
  );
  
  logInfo('[INFO] Lucia SQLite adapter created with existing database instance');

  return new Lucia(adapter, {
    sessionCookie: {
      name: 'session', // Important to use a generic name for production
      expires: false, // session cookies have very long lifespan (2 years)
      attributes: {
        // For development: use secure: false with sameSite: 'lax' and domain: 'localhost'
        // For production: use secure: true with sameSite: 'none' for cross-origin
        secure: process.env.NODE_ENV === 'production',
        sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
        path: '/', // Explicitly set path to root
        // Set domain to localhost in development to allow cross-port communication
        domain: process.env.NODE_ENV === 'production' ? undefined : 'localhost',
      },
    },
    getUserAttributes: (attributes: DatabaseUserAttributes) => {
      return {
        username: attributes.username,
        email: attributes.email,
        firstName: attributes.first_name, // Ensure this matches the casing in DatabaseUserAttributes
        lastName: attributes.last_name,   // Ensure this matches the casing in DatabaseUserAttributes
        authType: attributes.auth_type,
        githubId: attributes.github_id,
      };
    },
    getSessionAttributes: () => {
      // If DatabaseSessionAttributes is empty, attributes will be {}.
      // If you add properties to DatabaseSessionAttributes, type them here.
      return {
        // any custom session attributes if needed, ensure they are in DatabaseSessionAttributes
      };
    }
  });
}

// Lazy initialization function for GitHub OAuth
function initializeGithubAuth(): GitHub {
  return new GitHub(
    process.env.GITHUB_CLIENT_ID || 'YOUR_GITHUB_CLIENT_ID_HERE', // Replace with your actual Client ID or load from env
    process.env.GITHUB_CLIENT_SECRET || 'YOUR_GITHUB_CLIENT_SECRET_HERE', // Replace with your actual Client Secret or load from env
    process.env.GITHUB_REDIRECT_URI || 'http://localhost:3000/api/auth/github/callback'
  );
}

// Getter function for Lucia instance
export function getLucia(): Lucia {
  if (!luciaInstance) {
    luciaInstance = initializeLucia();
  }
  return luciaInstance;
}

// Function to reset Lucia instance (useful for testing or config changes)
export function resetLucia(): void {
  luciaInstance = null;
}

// Force reset on module reload in development
if (process.env.NODE_ENV !== 'production') {
  resetLucia();
}

// Force reset immediately to pick up schema changes
resetLucia();

// Getter function for GitHub OAuth instance
export function getGithubAuth(): GitHub {
  if (!githubAuthInstance) {
    githubAuthInstance = initializeGithubAuth();
  }
  return githubAuthInstance;
}

// Legacy exports for backward compatibility (deprecated)
export const lucia = getLucia;
export const githubAuth = getGithubAuth;

// IMPORTANT: Define DatabaseUserAttributes and DatabaseSessionAttributes
// These interfaces are crucial for type safety with Lucia.
// You should define them based on the columns in your authUser and authSession tables.

// Corresponds to the columns in your `authUser` table that you want Lucia to handle.
interface DatabaseUserAttributes {
  username: string;
  email: string;
  first_name: string | null;
  last_name: string | null;
  auth_type: 'email_signup' | 'github';
  github_id: string | null;
}

// Corresponds to any custom columns in your `authSession` table.
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
interface DatabaseSessionAttributes {
  // exampleProperty?: string; // Add any custom session attributes here
}

declare module 'lucia' {
  interface Register {
    Lucia: typeof lucia;
    DatabaseUserAttributes: DatabaseUserAttributes;
    DatabaseSessionAttributes: DatabaseSessionAttributes;
  }
}

// Ensure you have GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET in your .env file
// For example:
// GITHUB_CLIENT_ID=your_client_id
// GITHUB_CLIENT_SECRET=your_client_secret
